| You almost had it, but not quite. Try again.

| There are a lot more bars in this graph, right? Maybe 100 or so, right?

1: the number of stars in the sky
2: the number of data points to graph
3: the number of buckets to split the data into
4: the number of counties exceeding the EPA standard

Selection: 3

| You are really on a roll!

  |===================================                                           |  45%

| So this histogram with more buckets is not nearly as smooth as the preceding one. In fact, it's a little too noisy to see the distribution clearly.
| When you're plotting histograms you might have to experiment with the argument breaks to get a good idea of your data's distribution. For fun now,
| rerun the R command rug with the argument ppm.

> rug(ppm)

| Perseverance, that's the answer.

  |====================================                                          |  47%

| See how rug works with the existing plot? It automatically adjusted its pocket size to that of the last plot plotted.

...

  |=====================================                                         |  48%

| Now rerun hist with ppm as the data and col equal to "green".

> hist(ppm,col = "green")

| Keep up the great work!

  |======================================                                        |  49%

| Now run the command abline with the argument v equal to 12 and the argument lwd equal to 2.

> 
> abline(v=12,lwd=2)

| All that hard work is paying off!

  |========================================                                      |  51%

| See the vertical line at 12? Not very visible, is it, even though you specified a line width of 2? Run abline with the argument v equal to
| median(ppm), the argument col equal to "magenta", and the argument lwd equal to 4.

> abline(v=median(ppm),col="magenta",lwd=4)

| You nailed it! Good job!

  |=========================================                                     |  52%

| Better, right? Thicker and more of a contrast in color. This shows that although the median (50%) is below the standard, there are a fair number of
| counties in the U.S that have pollution levels higher than the standard.

...

  |==========================================                                    |  53%

| Now recall that our pollution data had 5 columns of information. So far we've only looked at the pm25 column. We can also look at other information.
| To remind yourself what's there run the R command names with pollution as the argument.

> pollution
         pm25  fips region  longitude latitude
1    9.771185 01003   east  -87.74826 30.59278
2    9.993817 01027   east  -85.84286 33.26581
3   10.688618 01033   east  -87.72596 34.73148
4   11.337424 01049   east  -85.79892 34.45913
5   12.119764 01055   east  -86.03212 34.01860
6   10.827805 01069   east  -85.35039 31.18973
7   11.583928 01073   east  -86.82805 33.52787

 [ reached getOption("max.print") -- omitted 376 rows ]

| One more time. You can do it! Or, type info() for more options.

| Type names(pollution) at the command prompt.

> names(pollution)
[1] "pm25"      "fips"      "region"    "longitude" "latitude" 

| Perseverance, that's the answer.

  |===========================================                                   |  55%

| Longitude and latitude don't sound interesting, and each fips is unique since it identifies states (first 2 digits) and counties (last 3 digits).
| Let's look at the region column to see what's there. Run the R command table on this column. Use the construct pollution$region. Store the result in
| the variable reg.

> table(pollution$region)

east west 
 442  134 

| Not quite! Try again. Or, type info() for more options.

| Type reg <- table(pollution$region) at the command prompt.

> reg<-table(pollution$region)

| Nice work!

  |============================================                                  |  56%

| Look at reg now.

> reg

east west 
 442  134 

| That's the answer I was looking for.

  |=============================================                                 |  57%

| Lot more counties in the east than west. We'll use the R command barplot (another type of one-dimensional summary) to plot this information. Call
| barplot with reg as its first argument, the argument col equal to "wheat", and the argument main equal to the string "Number of Counties in Each
| Region".

> barplot(reg,col = "wheat",main = "Number of Counties in Each Region")

| Keep working like that and you'll get there!

  |==============================================                                |  59%

| What do you think the argument main specifies?

1: the title of the graph
2: the x axis label
3: the y axis label
4: I can't tell

Selection: 1

| Your dedication is inspiring!

  |===============================================                               |  60%

| So we've seen several examples of one-dimensional graphs that summarize data. Two dimensional graphs include scatterplots, multiple graphs which
| we'll see more examples of, and overlayed one-dimensional plots which the R packages such as lattice and ggplot2 provide.

...

  |================================================                              |  61%

| Some graphs have more than two-dimensions. These include overlayed or multiple two-dimensional plots and spinning plots. Some three-dimensional
| plots are tricky to understand so have limited applications. We'll see some examples now of more complicated graphs, in particular, we'll show two
| graphs together.

...

  |=================================================                             |  63%

| First we'll show how R, in one line and using base plotting, can display multiple boxplots. We simply specify that we want to see the pollution data
| as a function of region. We know that our pollution data characterized each of the 576 entries as belonging to one of two regions (east and west).

...

  |==================================================                            |  64%

| We use the R formula y ~ x to show that y (in this case pm25) depends on x (region). Since both come from the same data frame (pollution) we can
| specify a data argument set equal to pollution. By doing this, we don't have to type pollution$pm25 (or ppm) and pollution$region. We can just
| specify the formula pm25~region. Call boxplot now with this formula as its argument, data equal to pollution, and col equal to "red".

> boxplot(pm25~region,data = pollution,col="red")

| Excellent job!

  |===================================================                           |  65%

| Two for the price of one! Similarly we can plot multiple histograms in one plot, though to do this we have to use more than one R command. First we
| have to set up the plot window with the R command par which specifies how we want to lay out the plots, say one above the other. We also use par to
| specify margins, a 4-long vector which indicates the number of lines for the bottom, left, top and right. Type the R command
| par(mfrow=c(2,1),mar=c(4,4,2,1)) now. Don't expect to see any new result.

> par((mfrow=)=c(2,1),mar=c(4,4,2,1))
Error: unexpected ')' in "par((mfrow=)"
> par(mfrow=c(2,1),mar=c(4,4,2,1))

| You are doing so well!

  |====================================================                          |  67%

| So we set up the plot window for two rows and one column with the mfrow argument. The mar argument set up the margins. Before we plot the histograms
| let's explore the R command subset which, not surprisingly, "returns subsets of vectors, matrices or data frames which meet conditions". We'll use
| subset to pull off the data we want to plot. Call subset now with pollution as its first argument and a boolean expression testing region for
| equality with the string "east". Put the result in the variable east.

> east<-subset(pollution,regiion=="east")
Error in eval(e, x, parent.frame()) : object 'regiion' not found
> east<-subset(pollution,region=="east")

| That's the answer I was looking for.

  |=====================================================                         |  68%

| Use head to look at the first few entries of east.

> head(east)
       pm25  fips region longitude latitude
1  9.771185 01003   east -87.74826 30.59278
2  9.993817 01027   east -85.84286 33.26581
3 10.688618 01033   east -87.72596 34.73148
4 11.337424 01049   east -85.79892 34.45913
5 12.119764 01055   east -86.03212 34.01860
6 10.827805 01069   east -85.35039 31.18973

| Excellent work!

  |======================================================                        |  69%

| So east holds more information than we need. We just want to plot a histogram with the pm25 portion. Call hist now with the pm25 portion of east as
| its first argument and col equal to "green" as its second.

> hist(east$pm25,col = "green")

| You're the best!

  |=======================================================                       |  71%

| See? The command par told R we were going to have one column with 2 rows, so it placed this histogram in the top position.

...

  |========================================================                      |  72%

| Now, here's a challenge for you. Plot the histogram of the counties from the west using just one R command. Let the appropriate subset command (with
| the pm25 portion specified) be the first argument and col (equal to "green") the second.  To cut down on your typing, use the up arrow key to get
| your last command and replace "east" with the subset command. Make sure the boolean argument checks for equality between region and "west".

> hist(pollution$region=="west",col = "green")
Error in hist.default(pollution$region == "west", col = "green") : 
  'x' must be numeric
> hist(subset(pollution,region=="west"),col = "green")
Error in hist.default(subset(pollution, region == "west"), col = "green") : 
  'x' must be numeric
> west<-subset(pollution,region=="west")

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more options.

| Type hist(subset(pollution,region=="west")$pm25, col = "green") at the command prompt.

> hist(subset(pollution,region=="west")$pm25,col = "green")

| Keep working like that and you'll get there!

  |=========================================================                     |  73%

| See how R does all the labeling for you? Notice that the titles are different since we used different commands for the two plots. Let's look at some
| scatter plots now.

...

  |==========================================================                    |  75%

| Scatter plots are two-dimensional plots which show the relationship between two variables, usually x and y. Let's look at a scatterplot showing the
| relationship between latitude and the pm25 data. We'll use plot, a function from R's base plotting package.

...

  |===========================================================                   |  76%

| We've seen that we can use a function call as an argument when calling another function. We'll do this again when we call plot with the arguments
| latitude and pm25 which are both from our data frame pollution. We'll call plot from inside the R command with which evaluates "an R expression in
| an environment constructed from data". We'll use pollution as the first argument to with and the call to plot as the second. This allows us to avoid
| typing "pollution$" before the arguments to plot, so it saves us some typing and adds to your base of R knowledge. Try this now.

> plot(pollution)

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Type with(pollution, plot(latitude, pm25)) at the command prompt.

> with(pollution,plot(latitute,pm25))
Error in plot(latitute, pm25) : object 'latitute' not found
> with(pollution,plot(latitude,pm25))

| You nailed it! Good job!

  |============================================================                  |  77%

| Note that the first argument is plotted along the x-axis and the second along the y. Now use abline to add a horizontal line at 12. Use two
| additional arguments, lwd equal to 2 and lty also equal to 2. See what happens.

> abline(h=12,lwd=2,lty=2)

| Great job!

  |=============================================================                 |  79%

| See how lty=2 made the line dashed? Now let's replot the scatterplot. This time, instead of using with, call plot directly with 3 arguments. The
| first 2 are pollution$latitude and ppm. The third argument, col, we'll use to add color and more information to our plot. Set this argument (col)
| equal to pollution$region and see what happens.

> plot(pollution$latitude,ppm,col=pollution$region)

| You got it right!

  |==============================================================                |  80%

| We've got two colors on the map to distinguish between counties in the east and those in the west. Can we figure out which color is east and which
| west? See that the high (greater than 50) and low (less than 25) latitudes are both red. Latitudes indicate distance from the equator, so which half
| of the U.S. (east or west) has counties at the extreme north and south?

1: west
2: east

Selection: 2

| You're close...I can feel it! Try it again.

| Alaska and Hawaii are at the extreme latitudes.

1: west
2: east

Selection: 1

| Excellent job!

  |===============================================================               |  81%

| As before, use abline to add a horizontal line at 12. Use two additional arguments, lwd equal to 2 and lty also equal to 2.

> abline(h=12,lwd=2,lty=2)

| You are amazing!

  |================================================================              |  83%

| We see many counties are above the healthy standard set by the EPA, but it's hard to tell overall, which region, east or west, is worse.

...

  |==================================================================            |  84%

| Let's plot two scatterplots distinguished by region.

...

  |===================================================================           |  85%

| As we did with multiple histograms, we first have to set up the plot window with the R command par. This time, let's plot the scatterplots side by
| side (one row and two columns). We also need to use different margins. Type the R command par(mfrow = c(1, 2), mar = c(5, 4, 2, 1)) now. Don't
| expect to see any new result.

> par(mfrow=c(1,2),mar=c(5,4,2,1))

| You got it right!

  |====================================================================          |  87%

| For the first scatterplot, on the left, we'll plot the latitudes and pm25 counts from the west. We already pulled out the information for the
| counties in the east. Let's now get the information for the counties from the west. Create the variable west by using the subset command with
| pollution as the first argument and the appropriate boolean as the second.

> west<-subset(pollution,region=="west")

| All that hard work is paying off!

  |=====================================================================         |  88%

| Now call plot with three arguments. These are west$latitude (x-axis), west$pm25 (y-axis), and the argument main equal to the string "West" (title).
| Do this now.

> plot(west$latitude,west$pm25,main = "West")

| You're the best!

  |======================================================================        |  89%

| For the second scatterplot, on the right, we'll plot the latitudes and pm25 counts from the east.

...

  |=======================================================================       |  91%

| As before, use the up arrow key and change the 3 "West" strings to "East".

> plot(east$latitude,east$pm25,main = "East")

| That's a job well done!

  |========================================================================      |  92%

| See how R took care of all the details for you? Nice, right? It looks like there are more dirty counties in the east but the extreme dirt (greater
| than 15) is in the west.

...

  |=========================================================================     |  93%

| Let's summarize and review.

...plot(west$latitude,west$pm25,main = "West")

  |==========================================================================    |  95%

| Which of the following characterizes exploratory plots?

1: slow and clean
2: quick and dirty
3: quick and dead
4: slow and steady

Selection: 2

| That's correct!

  |===========================================================================   |  96%

| True or false? Plots let you summarize the data (usually graphically) and highlight any broad features

1: False
2: True

Selection: 2

| All that practice is paying off!

  |============================================================================  |  97%

| Which of the following do plots NOT do?

1: Suggest modeling strategies for the "next step"
2: Summarize the data (usually graphically) and highlight any broad features
3: Explore basic questions and hypotheses (and perhaps rule them out)
4: Conclude that you are ALWAYS right

Selection: 4

| You nailed it! Good job!

  |============================================================================= |  99%

| Congrats! You've concluded exploring this lesson on graphics. We hope you didn't find it too quick or dirty.

...
